{% comment %} 视频滚动按帧切换 {% endcomment %}
<style>
 body{
   height:3600px;
 }   .page-container {
    transform: none;
}
    #shopify-section-header,.breadcrumb,#shopify-section-footer-copy{
    display:none;
  }
</style>
    <video id="videoId" muted="" src="https://cdn.shopify.com/videos/c/o/v/b73f572d6eac466ca9495791c7611e4f.mp4" style="position: fixed;top: 0;left: 0;width: 100%;"></video>
    <script>
      $.ajax({
            url: 'https://cdn.shopify.com/videos/c/o/v/b73f572d6eac466ca9495791c7611e4f.mp4',
            method: 'GET',
            xhrFields: {
                responseType: 'blob'
            },
            success: function(data) {
                var url = URL.createObjectURL(data);
                $('#videoId').attr('src', url);
            }
      });
      const videoEl = document.getElementById("videoId");
      // pause video on load
      videoEl.pause();
      // pause video on document scroll (stops autoplay once scroll started)
      window.onscroll = function () {
         videoEl.currentTime = window.pageYOffset / 300;
        videoEl.pause();
      };
      // setInterval(function () {
      //   videoEl.currentTime = window.pageYOffset / 300;
      //   console.log(videoEl.currentTime, window.pageYOffset)
      // }, 20);
    </script>



<!-- Launch Request 进度条 -->
{% comment %} {%- capture contentForQuerystring -%}{{ content_for_header }}{%- endcapture -%}
{% liquid
    assign pageParamStr = contentForQuerystring | split: '"pageurl":"' | last | split: '"' | first | url_decode | split: '?' | last | replace: '\/', '/' | replace: '%20', ' ' | replace: '\u0026', '&'
    assign pageParamStr02 =  contentForQuerystring | split: '"pageurl":"' | last | split: '"' | first | url_decode | split: '?'
    assign pageParamStr03 = pageParamStr02[1] | replace: '\/', '/' | replace: '%20', ' ' | replace: '\u0026', '&'
  %}
{% assign originstrim = pageParamStr02 | split: 'formid=' | last | strip | remove: ']' | remove: '[' | remove: '"' %} 
{% assign originname = pageParamStr02 | split: 'formid=' | first | split: 'name=' | last | remove: ']' | remove: '[' | remove: '"' | remove: ',' %} 
{{ pageParamStr }}---{{ pageParamStr02 }}
<div class="demo-01">
  <div class="demo-canvasbox">
 <canvas id="canvas" width="150" height="150"></canvas>
 <div id="value"></div>
  </div>
 <button onclick="makeRequest()">Launch Request</button>
   <button class="hide" onclick="makeRequest_sec()">Launch Request</button>
</div>  
  <style>
    .demo-canvasbox{
      position: relative;
    }
    #value{
    position: absolute;
    left: 50%;
    top: 48%;
    transform: translate(-50%,-50%);
    font-weight: bold;
    font-size: 18px;
    }
    button{
    border-radius: 5px;
    color: #000;
    font-size: 18px;
    padding: 6px 20px;
    font-weight: bold;
    border: none;
    background: #bcedbc;
    margin-top: 5px;
    }
    .demo-01{
          text-align: center;
    }
    .hide{
      display:none;
    }
  </style>
  <script>
    function makeRequest() {
      var progressBar = document.getElementById('progress');
      var canvas = document.getElementById('canvas');
      var ctx = canvas.getContext('2d');
      var x = canvas.width / 2;
      var y = canvas.height / 2;
      var radius = 60;
      var startAngle = 0;
      var endAngle = 0;
      // https://cdn.shopify.com/videos/c/o/v/bfb46e6e3ab544f8bb5284e670e07e52.mp4
      // https://cdn.shopify.com/s/files/1/0560/0162/6273/files/2_c67442bb-8f7f-4f7e-ab0c-720f20fe5c34.png?v=1688022306
      fetch('https://cdn.shopify.com/videos/c/o/v/bfb46e6e3ab544f8bb5284e670e07e52.mp4').then(response => { 
        var reader = response.body.getReader();//在fetch的then方法中，定义一个处理响应的回调函数,在这个回调函数中，使用了response.body.getReader()来获取响应的数据流
        var contentLength = +response.headers.get('content-length'); 
        var receivedLength = 0;

        function read() {  //定义了一个read函数来读取数据流。
          reader.read().then(({ done, value }) => {
            if (done) {
              console.log('请求完成');
              return;
            }
            receivedLength += value.length;
            document.getElementById('value').innerText = ((receivedLength / contentLength) * 100).toFixed(2)+"%"; //在read函数中，通过不断地读取数据流，计算接收到的数据长度，并根据接收到的数据长度和总长度来更新下载进度的圆形进度条的状态。
            console.log(receivedLength+"/"+contentLength);
            endAngle = (receivedLength / contentLength) * 2 * Math.PI;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.arc(x, y, radius, startAngle, endAngle); //ctx.arc方法来绘制圆形进度条
            ctx.strokeStyle = '#a7fff8'; // 设置描边颜色
            ctx.lineWidth = 3; // 设置线条粗细
            ctx.lineWidth = 10; // 设置线条粗细
            ctx.lineCap = 'round'; // 设置线条末端样式为圆形
            ctx.stroke();  
            // startAngle = endAngle;
            read();
          });
        }

        read();
      });
    }

  </script>
 {% endcomment %}



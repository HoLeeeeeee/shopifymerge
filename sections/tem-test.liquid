<div class="cart-container">
    <h2>Your Cart</h2>
    <!-- Cart items would be dynamically listed here -->

    <div class="discount-container">
        <input type="text" id="discount-code" placeholder="Enter discount code">
        <button id="apply-discount">Apply Discount</button>
        <p id="discount-message"></p>
    </div>
</div>

<script>
    document.getElementById('apply-discount').addEventListener('click', function() {
        const discountCode = document.getElementById('discount-code').value;
        applyDiscountCode(discountCode);
    });

    function applyDiscountCode(code) {
        fetch('/cart.js')
            .then(response => response.json())
            .then(cart => {
                fetch('/cart/update.js', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        note: code
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.note === code) {
                        document.getElementById('discount-message').textContent = 'Discount applied successfully!';
                    } else {
                        document.getElementById('discount-message').textContent = 'Failed to apply discount.';
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    document.getElementById('discount-message').textContent = 'Error applying discount.';
                });
            });
    }
</script>

</body>
</html>

刷新

新标签页


分享


关闭控制台
说明
折扣码验证: 实际上，Shopify 本身不提供折扣码验证的简单 API。通常，折扣码应用是在结账过程中进行的。
代码功能: 以上代码用于模拟折扣码的应用，将折扣码存储为购物车的备注（note），但并不验证其有效性。
现实实现: 真正的折扣验证需要在 Shopify 后台配置折扣，并在结账时自动应用。
如需真正的折扣验证，可能需要使用 Shopify Scripts 或第三方应用进行更复杂的实现。

你把code值赋值给data.note，然后再判断data.note==code，那肯定会相等啊

GPT-4o的机器人图片
GPT-4o

Poe
抱歉，我之前的描述不够准确。要实现折扣码的应用并检测其有效性，通常需要在结账流程中进行。简单的前端代码无法直接验证折扣码的有效性。下面是一个更合适的实现思路：

html

复制
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Discount Code Example</title>
    <style>
        body {
            font-family: Arial, sans-serif;
        }
        .cart-container {
            max-width: 400px;
            margin: 0 auto;
        }
        .discount-container {
            margin-top: 20px;
        }
        input {
            width: 100%;
            padding: 10px;
            margin-bottom: 10px;
        }
    </style>
</head>
<body>

<div class="cart-container">
    <h2>Your Cart</h2>
    <!-- Cart items would be dynamically listed here -->

    <div class="discount-container">
        <input type="text" id="discount-code" placeholder="Enter discount code">
        <button id="apply-discount">Apply Discount</button>
        <p id="discount-message"></p>
    </div>
</div>

<script>
    document.getElementById('apply-discount').addEventListener('click', function() {
        const discountCode = document.getElementById('discount-code').value;
        applyDiscountCode(discountCode);
    });

    function applyDiscountCode(code) {
        fetch('/discount/' + code)
            .then(response => {
                if (response.ok) {
                    document.getElementById('discount-message').textContent = 'Discount applied successfully!';
                } else {
                    document.getElementById('discount-message').textContent = 'Invalid discount code.';
                }
            })
            .catch(error => {
                console.error('Error:', error);
                document.getElementById('discount-message').textContent = 'Error applying discount.';
            });
    }
</script>

{% comment %} 视频滚动按帧切换 {% endcomment %}
<style>
 body{
   height:14000px;
 }   .page-container {
    transform: none;
}
    #shopify-section-header,.breadcrumb,#shopify-section-footer-copy{
    display:none;
  }
</style>
    <video id="videoId" preload="auto" muted="" src="https://www.apple.com/media/us/mac-pro/2013/16C1b6b5-1d91-4fef-891e-ff2fc1c1bb58/videos/macpro_main_desktop.mp4" style="position: fixed;top: 0;left: 0;width: 100%;"></video>
<script>
        $(document).ready(function() {
            $.ajax({
                url: 'https://www.apple.com/media/us/mac-pro/2013/16C1b6b5-1d91-4fef-891e-ff2fc1c1bb58/videos/macpro_main_desktop.mp4',
                method: 'GET',
                xhrFields: {
                    responseType: 'blob'
                },
                success: function(data) {
                    var url = URL.createObjectURL(data);
                    $('#videoId').attr('src', url);
                }
            });

            const videoEl = document.getElementById("videoId");
            videoEl.pause();  // pause video on load

            let isScrolling;
            const updateVideo = (value) => {
                videoEl.currentTime = value;
            };

            window.onscroll = function () {
                clearTimeout(isScrolling);
                let newsec = window.pageYOffset / 200;
                window.requestAnimationFrame(() => updateVideo(newsec));

                // Set a timeout to run after scrolling ends
                isScrolling = setTimeout(() => {
                    videoEl.pause();
                }, 66);  // roughly 15 frames per second
            };
        });
    </script>



<!-- Launch Request 进度条 -->
{% comment %} {%- capture contentForQuerystring -%}{{ content_for_header }}{%- endcapture -%}
{% liquid
    assign pageParamStr = contentForQuerystring | split: '"pageurl":"' | last | split: '"' | first | url_decode | split: '?' | last | replace: '\/', '/' | replace: '%20', ' ' | replace: '\u0026', '&'
    assign pageParamStr02 =  contentForQuerystring | split: '"pageurl":"' | last | split: '"' | first | url_decode | split: '?'
    assign pageParamStr03 = pageParamStr02[1] | replace: '\/', '/' | replace: '%20', ' ' | replace: '\u0026', '&'
  %}
{% assign originstrim = pageParamStr02 | split: 'formid=' | last | strip | remove: ']' | remove: '[' | remove: '"' %} 
{% assign originname = pageParamStr02 | split: 'formid=' | first | split: 'name=' | last | remove: ']' | remove: '[' | remove: '"' | remove: ',' %} 
{{ pageParamStr }}---{{ pageParamStr02 }}
<div class="demo-01">
  <div class="demo-canvasbox">
 <canvas id="canvas" width="150" height="150"></canvas>
 <div id="value"></div>
  </div>
 <button onclick="makeRequest()">Launch Request</button>
   <button class="hide" onclick="makeRequest_sec()">Launch Request</button>
</div>  
  <style>
    .demo-canvasbox{
      position: relative;
    }
    #value{
    position: absolute;
    left: 50%;
    top: 48%;
    transform: translate(-50%,-50%);
    font-weight: bold;
    font-size: 18px;
    }
    button{
    border-radius: 5px;
    color: #000;
    font-size: 18px;
    padding: 6px 20px;
    font-weight: bold;
    border: none;
    background: #bcedbc;
    margin-top: 5px;
    }
    .demo-01{
          text-align: center;
    }
    .hide{
      display:none;
    }
  </style>
  <script>
    function makeRequest() {
      var progressBar = document.getElementById('progress');
      var canvas = document.getElementById('canvas');
      var ctx = canvas.getContext('2d');
      var x = canvas.width / 2;
      var y = canvas.height / 2;
      var radius = 60;
      var startAngle = 0;
      var endAngle = 0;
      // https://cdn.shopify.com/videos/c/o/v/bfb46e6e3ab544f8bb5284e670e07e52.mp4
      // https://cdn.shopify.com/s/files/1/0560/0162/6273/files/2_c67442bb-8f7f-4f7e-ab0c-720f20fe5c34.png?v=1688022306
      fetch('https://cdn.shopify.com/videos/c/o/v/bfb46e6e3ab544f8bb5284e670e07e52.mp4').then(response => { 
        var reader = response.body.getReader();//在fetch的then方法中，定义一个处理响应的回调函数,在这个回调函数中，使用了response.body.getReader()来获取响应的数据流
        var contentLength = +response.headers.get('content-length'); 
        var receivedLength = 0;

        function read() {  //定义了一个read函数来读取数据流。
          reader.read().then(({ done, value }) => {
            if (done) {
              console.log('请求完成');
              return;
            }
            receivedLength += value.length;
            document.getElementById('value').innerText = ((receivedLength / contentLength) * 100).toFixed(2)+"%"; //在read函数中，通过不断地读取数据流，计算接收到的数据长度，并根据接收到的数据长度和总长度来更新下载进度的圆形进度条的状态。
            console.log(receivedLength+"/"+contentLength);
            endAngle = (receivedLength / contentLength) * 2 * Math.PI;
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            ctx.beginPath();
            ctx.arc(x, y, radius, startAngle, endAngle); //ctx.arc方法来绘制圆形进度条
            ctx.strokeStyle = '#a7fff8'; // 设置描边颜色
            ctx.lineWidth = 3; // 设置线条粗细
            ctx.lineWidth = 10; // 设置线条粗细
            ctx.lineCap = 'round'; // 设置线条末端样式为圆形
            ctx.stroke();  
            // startAngle = endAngle;
            read();
          });
        }

        read();
      });
    }

  </script>
 {% endcomment %}



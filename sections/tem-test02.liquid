<div
  data-section-id="{{ section.id }}"
  data-section-type="index-banner"
  id="index-banner"
  class="index-banner" style="display:none"
>

</div>
<script>
   let indexBannerContent;
    const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)
    if (isMobile || window.innerWidth <= 768) {
        // 判断是移动端时，引入移动端模板
     {% capture mobile_index_banner %}{% render "mobile_index_banner" %}{% endcapture %}
         indexBannerContent = {{ mobile_index_banner | json }};
    }else{
        {% capture pc_index_banner %}{% render "pc_index_banner" %}{% endcapture %}
          indexBannerContent = {{ pc_index_banner | json }};
     console.log(indexBannerContent);
    } 
    $('#index-banner').html(indexBannerContent);
</script>
<style>
  .page-container {
    transform: none;
}
  body{
       height: 100vh;
  }
  #MainContent{
        height: 500vh;
    background: #000;
  }
  #shopify-section-header,.breadcrumb,#shopify-section-footer-copy{
    display:none;
  }
  canvas,#demoimg {
    position: fixed;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
    max-width: 100vw;
    max-height: 100vh;
}
</style>


<canvas id="democg" width="1600" height="900">
    <script>
      const html = document.documentElement;
      const canvas = document.getElementById("democg");
      const context = canvas.getContext("2d");
      const frameCount = 42;
      const currentFrame = (index) => {
        return  `https://cdn.shopify.com/s/files/1/0077/3953/9515/files/testproduct_${index}.jpg`;
      }
       
      const preloadImages = () => {
        for (let i = 1; i < frameCount; i++) {
          const img = new Image();
          img.src = currentFrame(i);
        }
      };

      const img = new Image();
      img.src = currentFrame(1);
       const imgWidth = img.width;
        const imgHeight = img.height;

            // 计算绘制的宽高比例
            const canvasAspect = canvas.width / canvas.height;
            const imageAspect = imgWidth / imgHeight;

            let drawWidth, drawHeight;
            let offsetX = 0, offsetY = 0;

            if (imageAspect > canvasAspect) {
                // 图片宽高比大于画布宽高比，图片宽度较大，按照宽度缩放
                drawWidth = canvas.width;
                drawHeight = canvas.width / imageAspect;
                offsetY = (canvas.height - drawHeight) / 2;  // 垂直居中
            } else {
                // 图片宽高比小于或等于画布宽高比，图片高度较大，按照高度缩放
                drawWidth = canvas.height * imageAspect;
                drawHeight = canvas.height;
                offsetX = (canvas.width - drawWidth) / 2;  // 水平居中
            }

           
      img.onload = function () {
        // context.drawImage(img, 0, 0);
         // 绘制图片
        context.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      };

      const updateImage = (index) => {
        img.src = currentFrame(index);
        // context.drawImage(img, 0, 0);
         context.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);
      };

      window.addEventListener("scroll", () => {
        const scrollTop = html.scrollTop;
        const maxScrollTop = html.scrollHeight - window.innerHeight; // 总共可以滚动的距离
        const scrollFraction = scrollTop / maxScrollTop; // 当前滚动距离 / 总滚动距离
        // 当前图片帧 index = 滚动比例 * 总图片帧数
        const frameIndex = Math.min(
          frameCount - 1,
          Math.ceil(scrollFraction * frameCount)
        );

        requestAnimationFrame(() => updateImage(frameIndex + 1));
      });

      preloadImages();
    </script>
  
</canvas>
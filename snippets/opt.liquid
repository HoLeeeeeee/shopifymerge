<script {{ shop.id }}>
(function(config) {
    const { product, permanent_domain, shop_id, expires } = config;

    // 设置 window 全局变量
    window._shop_id = shop_id;
    window._authorizeDomain = permanent_domain;
    window._current_page = '{{template.name}}'; // 可以按实际模板替换

    // 判断是否过期或者不匹配
    const isExpired = expires && (expires + 0x9a7ec800 <= new Date().getTime());
    const domainMismatch = permanent_domain !== window.location.hostname;
    const shopIdMismatch = shop_id !== window._shop_id;

    if (!product || isExpired || domainMismatch || shopIdMismatch) {
        Object.defineProperty(window, 'in_service', { value: false, writable: false, configurable: false });
        return;
    }

    Object.defineProperty(window, 'in_service', { value: true, writable: false, configurable: false });

    // DOMContentLoaded 和 load 事件模拟
    const domEvent = new Event('DOMContentLoaded', { bubbles: true, cancelable: false, once: true });
    const loadEvent = new Event('load', { bubbles: true, cancelable: false, once: true });
    const oldAddEvent = window.addEventListener;

    window.addEventListener = document.addEventListener = function(event, fn, ...args) {
        if (event === 'DOMContentLoaded') {
            if (document.readyState === 'loading') {
                oldAddEvent.call(this, event, fn, ...args);
            } else {
                document.dispatchEvent(domEvent);
                fn.call(this, domEvent);
            }
        } else if (event === 'load') {
            if (document.readyState !== 'complete') {
                oldAddEvent.call(this, event, fn, ...args);
            } else {
                window.dispatchEvent(loadEvent);
                fn.call(this, loadEvent);
            }
        } else {
            oldAddEvent.call(this, event, fn, ...args);
        }
    };

    // 特定 UA 环境初始化（Linux 或 Mac WebKit）
    if (/((Linux|Macintosh).*AppleWebKit)/gi.test(navigator.userAgent)) {
        if (navigator.platform === 'Linux x86_64') {
            window.trekkie = { integrations: true, track() {} };
            window.BOOMR = { version: '2.3.4', snippetExecuted: new Date().getTime() };
        }
    }

    // 需要处理的 script 类型
    const allowedTypes = ['', 'text/javascript', 'text/lazyload'];

    const chromeExtensionRegex = /chrome-extension:\/\//;

    // 核心函数：处理新增或已有 script[data-plugin-src]
    function processPluginScript(node) {
        if (
            node.nodeType !== 1 || 
            node.tagName !== 'SCRIPT' || 
            !allowedTypes.includes(node.type) ||
            node.hasAttribute('data-load') ||
            chromeExtensionRegex.test(node.src)
        ) return;

        if (node.hasAttribute('data-plugin-src')) {
            node.removeAttribute('data-plugin-src');
        }

        if (node.src) {
            node.setAttribute('data-load', 'true');
        }

        node.type = node.type || 'text/javascript';
    }

    // 处理已有 script[data-plugin-src]
    document.querySelectorAll('script[data-plugin-src]').forEach(processPluginScript);

    // 监听动态新增 script
    const observer = new MutationObserver((mutations) => {
        mutations.forEach(({ addedNodes }) => {
            addedNodes.forEach(processPluginScript);
        });
    });

    observer.observe(document.documentElement, { childList: true, subtree: true });

})({
    product: true,
    permanent_domain: 'hourlishop.myshopify.com',
    shop_id: 7739539515,
    expires: 0x1996d00e800
});
</script>
